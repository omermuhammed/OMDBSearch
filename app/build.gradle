apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

//For Crashlytics integration, enable when you add your google-services.json
//apply plugin: 'io.fabric'

apply plugin: 'com.android.application'

apply plugin: "org.jlleitschuh.gradle.ktlint"

apply plugin: 'kotlin-allopen'

apply plugin: "androidx.navigation.safeargs.kotlin"

repositories {
    // For Crashlytics integration, enable when you add your google-services.json
//    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion rootProject.compileSdkVersion

    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "com.omermuhammed.omdbsearch"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"
        // this will allow us to run tests without DI
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        if(project.hasProperty("RELEASE_STORE_FILE")) {
            release {
                signingConfig signingConfigs.release
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                debuggable false

            }
        }
        debug {
            testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')

            // this will allow us to have debug and release builds on same device as separate apps
            applicationIdSuffix = '.debug'
            versionNameSuffix = '-Debug'
        }
    }

    // make sure to have "RELEASE_STORE_FILE" and other key/value pairs defined in .gradle/gradle.properties file
    if (project.hasProperty("RELEASE_STORE_FILE")) {
        signingConfigs {
            release {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    kapt {
        generateStubs = true
    }

    // this is for the shared object file
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }
}

dependencies {
    // Version numbers are defined in <PROJECT-NAME>/build.gradle

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Android/Kotlin standard libraries
    implementation "androidx.core:core-ktx:$rootProject.ktxVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$rootProject.kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$rootProject.kotlinVersion"

    // Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.coroutinesVersion"

    // Android UI
    implementation "androidx.appcompat:appcompat:$rootProject.appCompatVersion"
    implementation "com.google.android.material:material:$rootProject.materialVersion"
    implementation "androidx.fragment:fragment-ktx:$rootProject.fragmentVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.recyclerview:recyclerview:$rootProject.recyclerViewVersion"

    // Android Firebase Analytics, enable when you add your google-services.json
//    implementation "com.google.firebase:firebase-analytics:$rootProject.firebaseVersion"

    // Android Architecture Components
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    implementation "androidx.work:work-runtime-ktx:$rootProject.workmanagerVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.navigationVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$rootProject.archLifecycleVersion"
    kapt "androidx.room:room-compiler:$rootProject.roomVersion"

    // Crashlytics for error reporting, enable when you add your google-services.json
//    implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') { transitive = true }

    // 3rd Party Libraries
    // Dagger
    kapt "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.daggerVersion"
    implementation "com.google.dagger:dagger:$rootProject.daggerVersion"
    implementation "com.google.dagger:dagger-android:$rootProject.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$rootProject.daggerVersion"

    // Retrofit, Okhttp
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$rootProject.moshiConverterVersion"
    implementation "com.squareup.okhttp3:okhttp:$rootProject.okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.okhttp"

    // Moshi for Json parsing
    implementation "com.squareup.moshi:moshi-kotlin:$rootProject.moshiVersion"

    // Glide for image loading
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$rootProject.glideVersion"

    // Timber for logging
    implementation "com.jakewharton.timber:timber:$rootProject.timberVersion"

    // Testing
    androidTestImplementation "androidx.test:runner:$rootProject.TestRunner"
    androidTestImplementation "androidx.test:rules:$rootProject.TestRules"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.testExtJunit"

    // Espresso
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$rootProject.espressoVersion"

    //  Architecture Components testing libraries
    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.androidxArchVersion"
    androidTestImplementation "androidx.work:work-testing:$rootProject.androidxArchVersion"
    androidTestImplementation "androidx.room:room-testing:$rootProject.roomVersion"

    testImplementation "org.mockito:mockito-core:$rootProject.mockitoCore"
    testImplementation "org.mockito:mockito-android:$rootProject.mockitoAndroid"

    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "androidx.arch.core:core-testing:$rootProject.androidxArchVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.2"

    // Mockito
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoCore"
    testImplementation "com.squareup.okhttp3:mockwebserver:$rootProject.mockWebServer"
}

// For Crashlytics integration, enable when you add your google-services.json
//apply plugin: 'com.google.gms.google-services'
